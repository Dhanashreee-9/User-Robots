{"version":3,"sources":["reportWebVitals.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/Popup.js","Containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Popup","onClick","closePopup","App","onSearchChange","event","setState","searchfield","target","value","openPopup","popup","state","console","log","a","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Fragment","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kECQCQ,EAbH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAClB,OACA,sBAAKC,UAAU,mDAAf,UACG,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,cACpD,gCACC,6BAAKJ,IACL,4BAAIC,WCqBGI,EA1BC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAIb,OACI,8BAOAA,EAAOC,KAAI,SAACC,EAAKC,GAElB,OAAO,cAAC,EAAD,CAEMV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,OAHXQ,SCPZC,EATC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,uBAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAWH,EAC5DT,UAAU,mCCKHa,G,MARD,SAACC,GACX,OACI,qBAAKC,MAAO,CAACC,UAAY,SAASC,OAAO,kBAAoBC,OAAQ,SAArE,SACKJ,EAAMK,aCUJC,G,MAZF,SAACN,GACV,OACE,qBAAKd,UAAY,cAAjB,SACI,sBAAKA,UAAY,iBAAjB,UAEI,qBAAKA,UAAY,eAAeqB,QAASP,EAAMQ,WAA/C,eACA,8CC0EKC,E,kDAxEjB,aAAc,IAAD,8BACT,gBAcJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAhBhC,EAmCZC,UAAU,WACN,EAAKJ,SAAS,CAACK,OAAM,KApCb,EAsCZT,WAAW,WACP,EAAKI,SAAS,CAACK,OAAQ,KArCxB,EAAKC,MAAO,CACR5B,OAAS,GACTuB,YAAc,GAEhBI,OAAQ,GAEVE,QAAQC,IAAI,cARH,E,4FAkBf,iCAAAC,EAAA,sEACSC,MAAO,8CAIR9C,MAAK,SAAA+C,GACT,OAAOA,EAASC,UAEfhD,MAAK,SAAAiD,GAEH,EAAKb,SAAS,CAACtB,OAAQmC,OAV9B,OAYIN,QAAQC,IAAI,WAZhB,2C,0EAwBI,WAEI,MAA6BM,KAAKR,MAA3B5B,EAAP,EAAOA,OAAOuB,EAAd,EAAcA,YACdM,QAAQC,IAAI,UACZ,IAAMO,EAAgBrC,EAAOsC,QAAO,SAAAC,GAChC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASlB,EAAYiB,kBAI3D,OAAQH,EAAeK,OAGb,eAAC,IAAMC,SAAP,WACGP,KAAKR,MAAMD,MAAQ,cAAC,EAAD,CAAOT,WAAakB,KAAKlB,aAAgB,GACnE,sBAAKtB,UAAU,KAAf,UAEI,0CACA,wBAAQqB,QAASmB,KAAKV,UAAtB,wBAEA,cAAC,EAAD,CAAWrB,aAAc+B,KAAKhB,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUpB,OAAQqC,YAXrB,iD,GAtDKO,IAAMC,WCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BnE,M","file":"static/js/main.0a2dea34.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card =({id,name,email}) =>{\r\n    return(\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n       <img src={`https://robohash.org/${id}?200x200`} alt=\"RoboImage\"/>\r\n       <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n       </div>\r\n    </div>\r\n      \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robots})=>{\r\n    // const cardArray =robots.map((user,i) => { \r\n    //     return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    //        })\r\n     return(\r\n         <div>\r\n             {/* <Card id={robots[0].id} name={robots[0].name}  username={robots[0].username} email={robots[0].email}/>\r\n    <Card id={robots[1].id} name={robots[1].name}  username={robots[1].username} email={robots[1].email} />\r\n    <Card id={robots[2].id} name={robots[2].name}  username={robots[2].username} email={robots[2].email} /> */}\r\n         {/* {cardArray} */}\r\n\r\n         {\r\n         robots.map((user,i) => { \r\n\r\n        return <Card \r\n                     key ={i}\r\n                     id={robots[i].id} \r\n                     name={robots[i].name} \r\n                     email={robots[i].email}/>\r\n           })\r\n           }\r\n         </div>\r\n\r\n     )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <input type=\"search\" placeholder='Search Robots' onChange ={searchChange}\r\n        className=\"pa3 ba b-green bg-light-green\"/>\r\n    )\r\n    \r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return(\r\n        <div style={{overflowY : 'scroll',border:'3px solid black' , height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n      \r\n    )\r\n}\r\nexport default Scroll;","import { Component } from \"react\"\r\nimport './Popup.css'\r\n\r\nconst Popup =(props)=>{\r\n    return(\r\n      <div className = \"popup--back\">\r\n          <div className = \"popup--content\">\r\n              \r\n              <div className = \"popup--close\" onClick={props.closePopup}>x</div>\r\n              <h1>PopUp</h1>\r\n          </div>\r\n\r\n      </div>\r\n    )\r\n}\r\nexport default Popup;","import React from 'react';\r\n//import { Simulate } from 'react-dom/cjs/react-dom-test-utils.production.min';\r\nimport CardList from '../Components/CardList';\r\n//import {robots} from './robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\nimport Popup from '../Components/Popup';\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(){\r\n      super()\r\n      this.state ={\r\n          robots : [], //filter method is only applied on array not on string\r\n          searchfield : '',\r\n        //message :'RoboHash'\r\n        popup : false\r\n      }\r\n      console.log(\"construtor\")\r\n  }\r\n\r\n//    changeMessage=()=>{\r\n//       this.setState({message : 'You have subscribed successfully!!'});\r\n//   }\r\n\r\n  onSearchChange =(event)=>{\r\n      this.setState({searchfield :event.target.value});\r\n}\r\nasync componentDidMount(){ //after you want to show case \r\n   await fetch ('https://jsonplaceholder.typicode.com/users')\r\n//    const data =response.json();\r\n//    this.setState({robots : data});\r\n//    console.log(data);\r\n       .then(response=>{\r\n    return response.json()\r\n    })\r\n    .then(users=>{\r\n       // console.log(users);\r\n       this.setState({robots :users})\r\n    })\r\n    console.log(\"did run\")\r\n}\r\n// changeMessage =()=>{\r\n//     this.setState({message: \"No results found!!\"});\r\n// }\r\n   openPopup=()=>{\r\n       this.setState({popup:true})\r\n   }\r\n   closePopup=()=>{\r\n       this.setState({popup : false})\r\n   }\r\n\r\n    render(){\r\n        \r\n        const {robots,searchfield} = this.state;\r\n        console.log(\"Render\")\r\n        const filteredRobots =robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n       // console.log(filteredRobots);\r\n      return !filteredRobots.length ?\r\n             <h1>Loading....</h1> :\r\n            (\r\n                <React.Fragment>\r\n                  {this.state.popup ? <Popup closePopup ={this.closePopup}/> : \"\"}  \r\n            <div className=\"tc\">\r\n                \r\n                <h1>ROBOHASH</h1>\r\n                <button onClick={this.openPopup}>Open Popup</button>\r\n                {/* <button type=\"button\" onClick= {this.changeMessage} >Subscribe!!</button> */}\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n                \r\n               {/* {filteredRobots == 0 ? this.changeMessage : \"\"  } */}\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n }\r\n}\r\n    export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport tachyons from 'tachyons';\nimport App from './Containers/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}